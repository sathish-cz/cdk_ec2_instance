"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyStatementWithPrincipal = exports.PrincipalType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const _5_effect_1 = require("./5-effect");
var PrincipalType;
(function (PrincipalType) {
    PrincipalType["AWS"] = "AWS";
    PrincipalType["FEDERATED"] = "Federated";
    PrincipalType["CANONICAL_USER"] = "CanonicalUser";
    PrincipalType["SERVICE"] = "Service";
})(PrincipalType = exports.PrincipalType || (exports.PrincipalType = {}));
/**
 * (experimental) Adds "principal" functionality to the Policy Statement.
 *
 * @experimental
 */
class PolicyStatementWithPrincipal extends _5_effect_1.PolicyStatementWithEffect {
    constructor() {
        super(...arguments);
        /**
         * @experimental
         */
        this.useNotPrincipals = false;
        /**
         * @experimental
         */
        this.principals = {};
    }
    /**
     * (experimental) Injects principals into the statement.
     *
     * Only relevant for the main package. In CDK mode this only calls super.
     *
     * @experimental
     */
    toJSON() {
        // @ts-ignore only available after swapping 1-base
        if (typeof this.addResources == 'function') {
            this.cdkApplyPrincipals();
            return super.toJSON();
        }
        const mode = this.useNotPrincipals ? 'NotPrincipal' : 'Principal';
        const statement = super.toJSON();
        if (this.hasPrincipals()) {
            statement[mode] = this.principals;
        }
        return statement;
    }
    /**
     * (experimental) JSON-ify the policy statement.
     *
     * Used when JSON.stringify() is called
     *
     * @experimental
     */
    toStatementJson() {
        this.cdkApplyPrincipals();
        // @ts-ignore only available after swapping 1-base
        return super.toStatementJson();
    }
    /**
     * @experimental
     */
    cdkApplyPrincipals() { }
    /**
     * (experimental) Switches the statement to use [`notPrincipal`](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_notprincipal.html).
     *
     * @experimental
     */
    notPrincipals() {
        this.useNotPrincipals = true;
        return this;
    }
    /**
     * (experimental) Checks weather a principal was applied to the policy.
     *
     * @experimental
     */
    hasPrincipals() {
        return Object.keys(this.principals).length > 0;
    }
    /**
     * (experimental) Adds a principal to the statement.
     *
     * @param prefix One of **AWS**, **Federated**, **CanonicalUser** or **Service**.
     * @param principal The principal string.
     * @experimental
     */
    addPrincipal(prefix, principal) {
        this.skipAutoResource = true;
        if (!(prefix in this.principals)) {
            this.principals[prefix] = [];
        }
        this.principals[prefix].push(principal);
        return this;
    }
    /**
     * (experimental) Adds any principal to the statement.
     *
     * @param arn The ARN of the principal.
     * @param prefix One of **AWS**, **Federated**, **CanonicalUser** or **Service** - Default: **AWS**.
     * @experimental
     */
    for(arn, prefix) {
        return this.addPrincipal(prefix || PrincipalType.AWS, arn);
    }
    /**
     * (experimental) Adds an account principal to the statement.
     *
     * @param account ID of the AWS account.
     * @experimental
     */
    forAccount(account) {
        return this.addPrincipal(PrincipalType.AWS, `arn:aws:iam::${account}:root`);
    }
    /**
     * (experimental) Adds a [federated](https://aws.amazon.com/identity/federation/) (web identity) principal to the statement.
     *
     * @param provider ID of the AWS account.
     * @experimental
     */
    forFederated(provider) {
        return this.addPrincipal(PrincipalType.FEDERATED, provider);
    }
    /**
     * (experimental) Adds a federated [AWS Cognito](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc_cognito.html) principal to the statement.
     *
     * @experimental
     */
    forFederatedCognito() {
        return this.forFederated('cognito-identity.amazonaws.com');
    }
    /**
     * (experimental) Adds a federated [Amazon](https://login.amazon.com/) principal to the statement.
     *
     * @experimental
     */
    forFederatedAmazon() {
        return this.forFederated('www.amazon.com');
    }
    /**
     * (experimental) Adds a federated [Facebook](https://developers.facebook.com/docs/facebook-login) principal to the statement.
     *
     * @experimental
     */
    forFederatedFacebook() {
        return this.forFederated('graph.facebook.com');
    }
    /**
     * (experimental) Adds a federated [Google](https://developers.google.com/identity/protocols/oauth2/openid-connect) principal to the statement.
     *
     * @experimental
     */
    forFederatedGoogle() {
        return this.forFederated('accounts.google.com');
    }
    /**
     * (experimental) Adds a canonical user principal to the statement.
     *
     * @param userID The user ID.
     * @experimental
     */
    forCanonicalUser(userID) {
        return this.addPrincipal(PrincipalType.CANONICAL_USER, userID);
    }
    /**
     * (experimental) Adds federated SAML principal to the statement.
     *
     * @param account ID of the AWS account.
     * @param providerName Name of the SAML provider.
     * @experimental
     */
    forSaml(account, providerName) {
        return this.forFederated(`arn:aws:iam::${account}:saml-provider/${providerName}`);
    }
    /**
     * (experimental) Adds an IAM user principal to the statement.
     *
     * @param account ID of the AWS account.
     * @param user Name of the IAM user.
     * @experimental
     */
    forUser(account, user) {
        return this.addPrincipal(PrincipalType.AWS, `arn:aws:iam::${account}:user/${user}`);
    }
    /**
     * (experimental) Adds an IAM role principal to the statement.
     *
     * @param account ID of the AWS account.
     * @param role Name of the IAM role.
     * @experimental
     */
    forRole(account, role) {
        return this.addPrincipal(PrincipalType.AWS, `arn:aws:iam::${account}:role/${role}`);
    }
    /**
     * (experimental) Adds a specific assumed role session principal to the statement.
     *
     * @param account ID of the AWS account.
     * @param roleName Name of the IAM role.
     * @param sessionName Name of the session.
     * @experimental
     */
    forAssumedRoleSession(account, roleName, sessionName) {
        return this.addPrincipal(PrincipalType.AWS, `arn:aws:sts::${account}:assumed-role/${roleName}/${sessionName}`);
    }
    /**
     * (experimental) Adds a service principal to the statement.
     *
     * @param service Long version of the service name. Usually in the format: `long_service-name.amazonaws.com`.
     * @experimental
     */
    forService(service) {
        return this.addPrincipal(PrincipalType.SERVICE, service);
    }
    /**
     * (experimental) Grants public asses.
     *
     * **EVERYONE IN THE WORLD HAS ACCESS**
     *
     * We strongly recommend that you do not use a wildcard in the Principal element in a role's trust policy unless you otherwise restrict access through a Condition element in the policy. Otherwise, any IAM user in any account in your partition can access the role.
     *
     * @experimental
     */
    forPublic() {
        return this.addPrincipal(PrincipalType.AWS, '*');
    }
}
exports.PolicyStatementWithPrincipal = PolicyStatementWithPrincipal;
_a = JSII_RTTI_SYMBOL_1;
PolicyStatementWithPrincipal[_a] = { fqn: "cdk-iam-floyd.PolicyStatementWithPrincipal", version: "0.300.0" };
//# sourceMappingURL=data:application/json;base64,