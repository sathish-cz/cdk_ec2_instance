"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Operator = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * (experimental) Use condition operators in the `Condition` element to match the condition key and value in the policy against values in the request context.
 *
 * For more information about the `Condition` element, see [IAM JSON Policy Elements: Condition](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html).
 *
 * The condition operator that you can use in a policy depends on the condition key you choose. You can choose a global condition key or a service-specific condition key. To learn which condition operator you can use for a global condition key, see [AWS Global Condition Context Keys](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html). To learn which condition operator you can use for a service-specific condition key, see [Actions, Resources, and Condition Keys for AWS Services](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html) and choose the service that you want to view.
 *
 * https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html
 *
 * @experimental
 */
class Operator {
    constructor() {
        this.base = '';
        this.hasIfExists = false;
        this.hasForAllValues = false;
        this.hasForAnyValue = false;
    }
    setBase(base) {
        if (this.base.length) {
            throw new Error(`Operator already set: ${this.base}`);
        }
        this.base = base;
        return this;
    }
    /**
     * @experimental
     */
    toString() {
        let value = this.base;
        if (this.base.length == 0) {
            throw new Error('No operator set');
        }
        if (this.hasIfExists) {
            value += 'IfExists';
        }
        if (this.hasForAllValues) {
            value = `ForAllValues:${value}`;
        }
        if (this.hasForAnyValue) {
            value = `ForAnyValue:${value}`;
        }
        if (this.base == 'Null' && value != this.base) {
            throw new Error(`You cannot add modifiers to the "Null" operator: ${value}`);
        }
        return value;
    }
    /**
     * (experimental) You can add `IfExists` to the end of any condition operator name except the `Null` condition.
     *
     * For example, `StringLikeIfExists`. You do this to say "If the policy key is present in the context of the request, process the key as specified in the policy. If the key is not present, evaluate the condition element as true." Other condition elements in the statement can still result in a nonmatch, but not a missing key when checked with `...IfExists`.
     *
     * @experimental
     */
    ifExists() {
        this.hasIfExists = true;
        return this;
    }
    /**
     * (experimental) Tests whether the value of every member of the request set is a subset of the condition key set.
     *
     * The condition returns true if every key value in the request matches at least one value in the policy. It also returns true if there are no keys in the request, or if the key values resolve to a null data set, such as an empty string.
     *
     * @experimental
     */
    forAllValues() {
        this.hasForAllValues = true;
        return this;
    }
    /**
     * (experimental) Tests whether at least one member of the set of request values matches at least one member of the set of condition key values.
     *
     * The condition returns true if any one of the key values in the request matches any one of the condition values in the policy. For no matching key or a null dataset, the condition returns false.
     *
     * @experimental
     */
    forAnyValue() {
        this.hasForAnyValue = true;
        return this;
    }
    /**
     * (experimental) Exact match, case sensitive.
     *
     * @experimental
     */
    stringEquals() {
        return this.setBase('StringEquals');
    }
    /**
     * (experimental) Negated exact match, case sensitive.
     *
     * @experimental
     */
    stringNotEquals() {
        return this.setBase('StringNotEquals');
    }
    /**
     * (experimental) Exact match, ignore case.
     *
     * @experimental
     */
    stringEqualsIgnoreCase() {
        return this.setBase('StringEqualsIgnoreCase');
    }
    /**
     * (experimental) Exact exact match, ignore case.
     *
     * @experimental
     */
    stringNotEqualsIgnoreCase() {
        return this.setBase('StringNotEqualsIgnoreCase');
    }
    /**
     * (experimental) Case-sensitive match.
     *
     * The values can include a multi-character match wildcard (`*`) or a single-character match wildcard (`?`) anywhere in the string.
     *
     * @experimental
     */
    stringLike() {
        return this.setBase('StringLike');
    }
    /**
     * (experimental) Negated case-sensitive matching.
     *
     * The values can include a multi-character match wildcard (`*`) or a single-character match wildcard (`?`) anywhere in the string.
     *
     * @experimental
     */
    stringNotLike() {
        return this.setBase('StringNotLike');
    }
    /**
     * (experimental) Exact match.
     *
     * @experimental
     */
    numericEquals() {
        return this.setBase('NumericEquals');
    }
    /**
     * (experimental) Negated exact match.
     *
     * @experimental
     */
    numericNotEquals() {
        return this.setBase('NumericNotEquals');
    }
    /**
     * (experimental) Match numbers lower than value: `<`.
     *
     * @experimental
     */
    numericLessThan() {
        return this.setBase('NumericLessThan');
    }
    /**
     * (experimental) Match numbers lower or equal to value: `<=`.
     *
     * @experimental
     */
    numericLessThanEquals() {
        return this.setBase('NumericLessThanEquals');
    }
    /**
     * (experimental) Match numbers higher than value: `>`.
     *
     * @experimental
     */
    numericGreaterThan() {
        return this.setBase('NumericGreaterThan');
    }
    /**
     * (experimental) Match numbers higher or equal value: `>=`.
     *
     * @experimental
     */
    numericGreaterThanEquals() {
        return this.setBase('NumericGreaterThanEquals');
    }
    /**
     * (experimental) Match a specific date: `=`.
     *
     * @experimental
     */
    dateEquals() {
        return this.setBase('DateEquals');
    }
    /**
     * (experimental) Negated match for a specific date: `!=`.
     *
     * @experimental
     */
    dateNotEquals() {
        return this.setBase('DateNotEquals');
    }
    /**
     * (experimental) Match before a specific date and time: `<`.
     *
     * @experimental
     */
    dateLessThan() {
        return this.setBase('DateLessThan');
    }
    /**
     * (experimental) Match at or before a specific date and time: `<=`.
     *
     * @experimental
     */
    dateLessThanEquals() {
        return this.setBase('DateLessThanEquals');
    }
    /**
     * (experimental) Match after a specific a date and time: `>`.
     *
     * @experimental
     */
    dateGreaterThan() {
        return this.setBase('DateGreaterThan');
    }
    /**
     * (experimental) Match at or after a specific date and time: `>=`.
     *
     * @experimental
     */
    dateGreaterThanEquals() {
        return this.setBase('DateGreaterThanEquals');
    }
    /**
     * (experimental) Boolean match.
     *
     * @experimental
     */
    bool() {
        return this.setBase('Bool');
    }
    /**
     * (experimental) The BinaryEquals condition operator lets you construct Condition elements that test key values that are in binary format.
     *
     * It compares the value of the specified key byte for byte against a [base-64](https://en.wikipedia.org/wiki/Base64) encoded representation of the binary value in the policy.
     *
     * @experimental
     */
    binaryEquals() {
        return this.setBase('BinaryEquals');
    }
    /**
     * (experimental) Match an IP address or range: `=`.
     *
     * @experimental
     */
    ipAddress() {
        return this.setBase('IpAddress');
    }
    /**
     * (experimental) All IP addresses except the specified IP address or range `!=`.
     *
     * @experimental
     */
    notIpAddress() {
        return this.setBase('NotIpAddress');
    }
    /**
     * (experimental) Match of the ARN, case sensitive.
     *
     * Each of the six colon-delimited components of the ARN is checked separately and each can include a multi-character match wildcard (`*`) or a single-character match wildcard (`?`).
     *
     * `ArnEquals` and `ArnLike` behave identical.
     *
     * @experimental
     */
    arnEquals() {
        return this.setBase('ArnEquals');
    }
    /**
     * (experimental) Negated match of the ARN, case sensitive.
     *
     * Each of the six colon-delimited components of the ARN is checked separately and each can include a multi-character match wildcard (`*`) or a single-character match wildcard (`?`).
     *
     * `ArnNotEquals` and `ArnNotLike` behave identical.
     *
     * @experimental
     */
    arnNotEquals() {
        return this.setBase('ArnNotEquals');
    }
    /**
     * (experimental) Match of the ARN, case sensitive.
     *
     * Each of the six colon-delimited components of the ARN is checked separately and each can include a multi-character match wildcard (`*`) or a single-character match wildcard (`?`).
     *
     * @experimental
     */
    arnLike() {
        return this.setBase('ArnLike');
    }
    /**
     * (experimental) Negated match of the ARN, case sensitive.
     *
     * Each of the six colon-delimited components of the ARN is checked separately and each can include a multi-character match wildcard (`*`) or a single-character match wildcard (`?`).
     *
     * `ArnNotEquals` and `ArnNotLike` behave identical.
     *
     * @experimental
     */
    arnNotLike() {
        return this.setBase('ArnNotLike');
    }
    /**
     * (experimental) Check if a key is present at the time of authorization.
     *
     * In the policy statement, use either true (the key doesn't exist — it is null) or false (the key exists and its value is not null).
     *
     * @experimental
     */
    null() {
        return this.setBase('Null');
    }
}
exports.Operator = Operator;
_a = JSII_RTTI_SYMBOL_1;
Operator[_a] = { fqn: "cdk-iam-floyd.Operator", version: "0.300.0" };
//# sourceMappingURL=data:application/json;base64,