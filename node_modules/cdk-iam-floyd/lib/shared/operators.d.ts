/**
 * (experimental) Use condition operators in the `Condition` element to match the condition key and value in the policy against values in the request context.
 *
 * For more information about the `Condition` element, see [IAM JSON Policy Elements: Condition](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html).
 *
 * The condition operator that you can use in a policy depends on the condition key you choose. You can choose a global condition key or a service-specific condition key. To learn which condition operator you can use for a global condition key, see [AWS Global Condition Context Keys](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html). To learn which condition operator you can use for a service-specific condition key, see [Actions, Resources, and Condition Keys for AWS Services](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html) and choose the service that you want to view.
 *
 * https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html
 *
 * @experimental
 */
export declare class Operator {
    private base;
    private hasIfExists;
    private hasForAllValues;
    private hasForAnyValue;
    private setBase;
    /**
     * @experimental
     */
    toString(): string;
    /**
     * (experimental) You can add `IfExists` to the end of any condition operator name except the `Null` condition.
     *
     * For example, `StringLikeIfExists`. You do this to say "If the policy key is present in the context of the request, process the key as specified in the policy. If the key is not present, evaluate the condition element as true." Other condition elements in the statement can still result in a nonmatch, but not a missing key when checked with `...IfExists`.
     *
     * @experimental
     */
    ifExists(): this;
    /**
     * (experimental) Tests whether the value of every member of the request set is a subset of the condition key set.
     *
     * The condition returns true if every key value in the request matches at least one value in the policy. It also returns true if there are no keys in the request, or if the key values resolve to a null data set, such as an empty string.
     *
     * @experimental
     */
    forAllValues(): this;
    /**
     * (experimental) Tests whether at least one member of the set of request values matches at least one member of the set of condition key values.
     *
     * The condition returns true if any one of the key values in the request matches any one of the condition values in the policy. For no matching key or a null dataset, the condition returns false.
     *
     * @experimental
     */
    forAnyValue(): this;
    /**
     * (experimental) Exact match, case sensitive.
     *
     * @experimental
     */
    stringEquals(): this;
    /**
     * (experimental) Negated exact match, case sensitive.
     *
     * @experimental
     */
    stringNotEquals(): this;
    /**
     * (experimental) Exact match, ignore case.
     *
     * @experimental
     */
    stringEqualsIgnoreCase(): this;
    /**
     * (experimental) Exact exact match, ignore case.
     *
     * @experimental
     */
    stringNotEqualsIgnoreCase(): this;
    /**
     * (experimental) Case-sensitive match.
     *
     * The values can include a multi-character match wildcard (`*`) or a single-character match wildcard (`?`) anywhere in the string.
     *
     * @experimental
     */
    stringLike(): this;
    /**
     * (experimental) Negated case-sensitive matching.
     *
     * The values can include a multi-character match wildcard (`*`) or a single-character match wildcard (`?`) anywhere in the string.
     *
     * @experimental
     */
    stringNotLike(): this;
    /**
     * (experimental) Exact match.
     *
     * @experimental
     */
    numericEquals(): this;
    /**
     * (experimental) Negated exact match.
     *
     * @experimental
     */
    numericNotEquals(): this;
    /**
     * (experimental) Match numbers lower than value: `<`.
     *
     * @experimental
     */
    numericLessThan(): this;
    /**
     * (experimental) Match numbers lower or equal to value: `<=`.
     *
     * @experimental
     */
    numericLessThanEquals(): this;
    /**
     * (experimental) Match numbers higher than value: `>`.
     *
     * @experimental
     */
    numericGreaterThan(): this;
    /**
     * (experimental) Match numbers higher or equal value: `>=`.
     *
     * @experimental
     */
    numericGreaterThanEquals(): this;
    /**
     * (experimental) Match a specific date: `=`.
     *
     * @experimental
     */
    dateEquals(): this;
    /**
     * (experimental) Negated match for a specific date: `!=`.
     *
     * @experimental
     */
    dateNotEquals(): this;
    /**
     * (experimental) Match before a specific date and time: `<`.
     *
     * @experimental
     */
    dateLessThan(): this;
    /**
     * (experimental) Match at or before a specific date and time: `<=`.
     *
     * @experimental
     */
    dateLessThanEquals(): this;
    /**
     * (experimental) Match after a specific a date and time: `>`.
     *
     * @experimental
     */
    dateGreaterThan(): this;
    /**
     * (experimental) Match at or after a specific date and time: `>=`.
     *
     * @experimental
     */
    dateGreaterThanEquals(): this;
    /**
     * (experimental) Boolean match.
     *
     * @experimental
     */
    bool(): this;
    /**
     * (experimental) The BinaryEquals condition operator lets you construct Condition elements that test key values that are in binary format.
     *
     * It compares the value of the specified key byte for byte against a [base-64](https://en.wikipedia.org/wiki/Base64) encoded representation of the binary value in the policy.
     *
     * @experimental
     */
    binaryEquals(): this;
    /**
     * (experimental) Match an IP address or range: `=`.
     *
     * @experimental
     */
    ipAddress(): this;
    /**
     * (experimental) All IP addresses except the specified IP address or range `!=`.
     *
     * @experimental
     */
    notIpAddress(): this;
    /**
     * (experimental) Match of the ARN, case sensitive.
     *
     * Each of the six colon-delimited components of the ARN is checked separately and each can include a multi-character match wildcard (`*`) or a single-character match wildcard (`?`).
     *
     * `ArnEquals` and `ArnLike` behave identical.
     *
     * @experimental
     */
    arnEquals(): this;
    /**
     * (experimental) Negated match of the ARN, case sensitive.
     *
     * Each of the six colon-delimited components of the ARN is checked separately and each can include a multi-character match wildcard (`*`) or a single-character match wildcard (`?`).
     *
     * `ArnNotEquals` and `ArnNotLike` behave identical.
     *
     * @experimental
     */
    arnNotEquals(): this;
    /**
     * (experimental) Match of the ARN, case sensitive.
     *
     * Each of the six colon-delimited components of the ARN is checked separately and each can include a multi-character match wildcard (`*`) or a single-character match wildcard (`?`).
     *
     * @experimental
     */
    arnLike(): this;
    /**
     * (experimental) Negated match of the ARN, case sensitive.
     *
     * Each of the six colon-delimited components of the ARN is checked separately and each can include a multi-character match wildcard (`*`) or a single-character match wildcard (`?`).
     *
     * `ArnNotEquals` and `ArnNotLike` behave identical.
     *
     * @experimental
     */
    arnNotLike(): this;
    /**
     * (experimental) Check if a key is present at the time of authorization.
     *
     * In the policy statement, use either true (the key doesn't exist â€” it is null) or false (the key exists and its value is not null).
     *
     * @experimental
     */
    null(): this;
}
